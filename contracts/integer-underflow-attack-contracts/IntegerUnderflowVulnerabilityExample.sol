// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract IntegerUnderflowVulnerabilityExample {
    // This mapping keeps track of the balances for each address.
    mapping(address => uint256) public balances;

    // Function to deposit funds into the contract.
    function deposit() external payable {
        // Increase the balance for the caller's address by the amount of Ether sent with the transaction.
        balances[msg.sender] += msg.value;
    }

    // Function to withdraw funds from the contract.
    function withdraw(uint256 amount) external returns (bool) {
        if (balances[msg.sender] >= amount) {
            // Decrease the balance for the caller's address by the specified withdrawal amount.
            balances[msg.sender] -= amount;

            // Transfer the specified amount of Ether back to the caller.
            payable(msg.sender).transfer(amount);
            return true;
        } else {
            // Insufficient balance, return false to indicate failure.
            return false;
        }
    }
}
