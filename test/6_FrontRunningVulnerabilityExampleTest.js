const { expect } = require('chai');
const { ethers } = require('hardhat');

describe('Front-Running Simulation', function () {
  let frontRunningVulnerabilityExample;
  let owner;
  let attacker;

  beforeEach(async function () {
    [owner, attacker] = await ethers.getSigners();

    const FrontRunningVulnerabilityExample = await ethers.getContractFactory('FrontRunningVulnerabilityExample');
    frontRunningVulnerabilityExample = await FrontRunningVulnerabilityExample.deploy();
    await frontRunningVulnerabilityExample.deployed();
  });

  it('simulate a front-running attack', async function () {
    // The victim deposits 30 ETH
        // Fund victim's and attacker's accounts with Ether
        const victimBalance = ethers.utils.parseEther('10');
        const attackerBalance = ethers.utils.parseEther('5');
        await owner.sendTransaction({ to: victimBalance });
        await attacker.sendTransaction({ to: attackerBalance });

       // Victim submits a transaction to the vulnerable function (e.g., a large withdrawal)
        const victimWithdrawAmount = ethers.utils.parseEther('10');
        await frontRunningVulnerabilityExample.connect(owner).deposit({ value: victimWithdrawAmount });

        // Wait for the victim's transaction to be in the transaction pool but not yet mined
        const pendingTransactions = await ethers.provider.send('eth_pendingTransactions', []);

        // Attacker submits a transaction to the same function with a higher gas price
        const attackerWithdrawAmount = ethers.utils.parseEther('20');
        const attackerTransaction = await frontRunningVulnerabilityExample.connect(attacker).withdraw(attackerWithdrawAmount, { gasPrice: 20000000000 });

        // Confirm that the attacker's transaction was mined first
        const receipt = await ethers.provider.getTransactionReceipt(attackerTransaction.hash);
        expect(receipt).to.exist;
        expect(receipt.blockNumber).to.be.lessThan(pendingTransactions[0].blockNumber);

        // Verify the contract's state and the victim's balance to confirm the front-running attack
        const victimNewBalance = await frontRunningVulnerabilityExample.balances(owner.address);
        expect(victimNewBalance).to.equal(0, 'Victim should have 0 ETH balance after the attack');
  });
});









