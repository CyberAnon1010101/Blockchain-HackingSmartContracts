const { ethers } = require('hardhat');
const { expect } = require('chai');

describe('Denial Of Service Simulation', function () {
  let denialOfServiceVulnerabilityExample;
  let attacker;
  let owner;

  before(async () => {
    // Set up contract deployment and test environment
    [owner, attacker] = await ethers.getSigners();

    console.log('Deploying DenialOfServiceVulnerabilityExample contract...');
    
    // Deploy the DenialOfServiceVulnerabilityExample contract
    const DenialOfServiceVulnerabilityExample = await ethers.getContractFactory('DenialOfServiceVulnerabilityExample');
    denialOfServiceVulnerabilityExample = await DenialOfServiceVulnerabilityExample.deploy();
    await denialOfServiceVulnerabilityExample.deployed();
  });

  it('simulate a denial of service attack', async () => {
    // Prepare a large input array
    const largeArray = new Array(1000).fill(1);

    // Attacker sends a transaction with a large input array
    const tx = denialOfServiceVulnerabilityExample.connect(attacker).addData(largeArray);

    console.log('Sending a Transaction to The Contract With a Large Input Array...');

    // Attempt to execute the transaction
    try {
      await tx;
      // The transaction should fail due to out-of-gas
    } catch (error) {
      // Check if the error message indicates an out-of-gas condition
      expect(error.message).to.include('out of gas');
    }
  });
});
